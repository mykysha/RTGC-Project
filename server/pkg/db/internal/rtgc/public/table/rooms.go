//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Rooms = newRoomsTable("public", "rooms", "")

type roomsTable struct {
	postgres.Table

	// Columns
	ID   postgres.ColumnInteger
	Name postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RoomsTable struct {
	roomsTable

	EXCLUDED roomsTable
}

// AS creates new RoomsTable with assigned alias
func (a RoomsTable) AS(alias string) *RoomsTable {
	return newRoomsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RoomsTable with assigned schema name
func (a RoomsTable) FromSchema(schemaName string) *RoomsTable {
	return newRoomsTable(schemaName, a.TableName(), a.Alias())
}

func newRoomsTable(schemaName, tableName, alias string) *RoomsTable {
	return &RoomsTable{
		roomsTable: newRoomsTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newRoomsTableImpl("", "excluded", ""),
	}
}

func newRoomsTableImpl(schemaName, tableName, alias string) roomsTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		NameColumn     = postgres.StringColumn("name")
		allColumns     = postgres.ColumnList{IDColumn, NameColumn}
		mutableColumns = postgres.ColumnList{IDColumn, NameColumn}
	)

	return roomsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		// Columns
		ID:   IDColumn,
		Name: NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
